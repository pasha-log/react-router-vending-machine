{"version":3,"sources":["NavBar.js","VendingMachine.js","Yerba.js","Chips.js","Larabar.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","react_router_dom","exact","to","VendingMachine","src_NavBar_0","Yerba","alt","src","Chips","LaraBar","App","react_router","path","src_VendingMachine_0","src_Yerba","src_Chips","Larabar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iOA0BeA,SAtBA,WACd,OACCC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAACE,EAAA,EAAO,CAACC,OAAK,EAACC,GAAG,UAAS,eAI5BN,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAACE,EAAA,EAAO,CAACC,OAAK,EAACC,GAAG,UAAS,UAI5BN,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAACE,EAAA,EAAO,CAACC,OAAK,EAACC,GAAG,YAAW,eCDlBC,SAbQ,WACtB,OACCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACdH,EAAAC,EAAAC,cAAA,SAAG,gDAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdH,EAAAC,EAAAC,cAACM,EAAM,UCQIC,MAhBf,WACC,OACCT,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAI,8BACJF,EAAAC,EAAAC,cAACE,EAAA,EAAO,CAACC,OAAK,EAACC,GAAG,KAAI,WAItBN,EAAAC,EAAAC,cAAA,OACCQ,IAAI,GACJC,IAAI,2ICKOC,MAff,WACC,OACCZ,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAI,SACJF,EAAAC,EAAAC,cAACE,EAAA,EAAO,CAACC,OAAK,EAACC,GAAG,KAAI,WAGtBN,EAAAC,EAAAC,cAAA,OACCQ,IAAI,GACJC,IAAI,0GCMOE,MAff,WACC,OACCb,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAI,cACJF,EAAAC,EAAAC,cAACE,EAAA,EAAO,CAACC,OAAK,EAACC,GAAG,KAAI,WAGtBN,EAAAC,EAAAC,cAAA,OACCQ,IAAI,GACJC,IAAI,0GCmBOG,MAxBf,WACC,OACCd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAACE,EAAA,EAAa,KACbJ,EAAAC,EAAAC,cAACa,EAAA,EAAM,KACNf,EAAAC,EAAAC,cAACa,EAAA,EAAK,CAACV,OAAK,EAACW,KAAK,KACjBhB,EAAAC,EAAAC,cAACe,EAAc,OAEhBjB,EAAAC,EAAAC,cAACa,EAAA,EAAK,CAACV,OAAK,EAACW,KAAK,UACjBhB,EAAAC,EAAAC,cAACgB,EAAK,OAEPlB,EAAAC,EAAAC,cAACa,EAAA,EAAK,CAACV,OAAK,EAACW,KAAK,UACjBhB,EAAAC,EAAAC,cAACiB,EAAK,OAEPnB,EAAAC,EAAAC,cAACa,EAAA,EAAK,CAACV,OAAK,EAACW,KAAK,YACjBhB,EAAAC,EAAAC,cAACkB,EAAO,QAGVpB,EAAAC,EAAAC,cAACa,EAAA,EAAQ,CAACT,GAAG,SCbGe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAG,MAAKC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.16eba66b.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './NavBar.css';\n\nconst NavBar = () => {\n\treturn (\n\t\t<ul className=\"Navbar\">\n\t\t\t<li>\n\t\t\t\t<NavLink exact to=\"/yerba\">\n\t\t\t\t\tYerba Mate\n\t\t\t\t</NavLink>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<NavLink exact to=\"/chips\">\n\t\t\t\t\tChips\n\t\t\t\t</NavLink>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<NavLink exact to=\"/larabar\">\n\t\t\t\t\tLaraBar\n\t\t\t\t</NavLink>\n\t\t\t</li>\n\t\t</ul>\n\t);\n};\n\nexport default NavBar;\n","import React from 'react';\nimport NavBar from './NavBar';\nimport './VendingMachine.css';\n\nconst VendingMachine = () => {\n\treturn (\n\t\t<div className=\"Vending-machine\">\n\t\t\t<div className=\"Greeting\">\n\t\t\t\t<p>Hello, I'm a vending machine. Pick a snack.</p>\n\t\t\t</div>\n\t\t\t<div className=\"Snack-choices\">\n\t\t\t\t<NavBar />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default VendingMachine;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nfunction Yerba() {\n\treturn (\n\t\t<div>\n\t\t\t<h1>MMMMMM GUILT-FREE CAFFEINE</h1>\n\t\t\t<NavLink exact to=\"/\">\n\t\t\t\tGo Back\n\t\t\t</NavLink>\n\n\t\t\t<img\n\t\t\t\talt=\"\"\n\t\t\t\tsrc=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRQ4K7KRGZ_ODeh5L2cRdbRR_r7pXXCJ1JORMqgQBMZuZka8dHuJRNZlR4pKVkTJI7CBo8&usqp=CAU\"\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default Yerba;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nfunction Chips() {\n\treturn (\n\t\t<div>\n\t\t\t<h1>Chips</h1>\n\t\t\t<NavLink exact to=\"/\">\n\t\t\t\tGo Back\n\t\t\t</NavLink>\n\t\t\t<img\n\t\t\t\talt=\"\"\n\t\t\t\tsrc=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTL3X3VOm12gm2-Sqroe0xFGkn5gOjNttwaSw&usqp=CAU\"\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default Chips;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nfunction LaraBar() {\n\treturn (\n\t\t<div>\n\t\t\t<h1>Energy Bar</h1>\n\t\t\t<NavLink exact to=\"/\">\n\t\t\t\tGo Back\n\t\t\t</NavLink>\n\t\t\t<img\n\t\t\t\talt=\"\"\n\t\t\t\tsrc=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQrslXt10E9d4brtooCFFy6NaV9Dq2IB4VVgw&usqp=CAU\"\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default LaraBar;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport VendingMachine from './VendingMachine';\nimport Yerba from './Yerba';\nimport Chips from './Chips';\nimport LaraBar from './Larabar';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<BrowserRouter>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t\t<VendingMachine />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path=\"/yerba\">\n\t\t\t\t\t\t<Yerba />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path=\"/chips\">\n\t\t\t\t\t\t<Chips />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path=\"/larabar\">\n\t\t\t\t\t\t<LaraBar />\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t\t<Redirect to=\"/\" />\n\t\t\t</BrowserRouter>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}